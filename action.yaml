name: "Build and Push Docker Image"
description: "Builds and pushes a Docker image with multi-platform support. Tags :latest only for semver releases."

inputs:
  github-token:
    description: "GitHub token with package write access"
    required: true
  context:
    description: "Docker build context"
    default: .
  dockerfile:
    description: "Dockerfile path"
    default: Dockerfile
  registry:
    description: "Container registry"
    default: ghcr.io
  image-name:
    description: "Name of the Docker image"
    required: true
  platforms:
    description: "Platforms to build for"
    default: linux/amd64,linux/arm64

outputs:
  tag:
    description: "Docker tag used"
    value: ${{ steps.vars.outputs.tag }}
  latest:
    description: "Whether this build is tagged as latest"
    value: ${{ steps.vars.outputs.latest }}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ inputs.github-token }}

    - name: Extract tag name
      id: vars
      shell: bash
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        IMAGE_NAME_LOWER=$(echo "${INPUT_IMAGE_NAME}" | tr '[:upper:]' '[:lower:]')
        echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "image_name=${IMAGE_NAME_LOWER}" >> $GITHUB_OUTPUT

        if [[ "$TAG_NAME" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "latest=true" >> $GITHUB_OUTPUT
        else
          echo "latest=false" >> $GITHUB_OUTPUT

    - name: Build and push Docker image (multi-platform)
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        push: true
        platforms: ${{ inputs.platforms }}
        tags: |
          ${{ inputs.registry }}/${{ steps.vars.outputs.image_name }}:${{ steps.vars.outputs.tag }}
          ${{ steps.vars.outputs.latest == 'true' && inputs.registry + '/' + steps.vars.outputs.image_name + ':latest' || '' }}
        build-args: |
          IMAGE_TAG=${{ steps.vars.outputs.tag }}
        cache-from: type=registry,ref=${{ inputs.registry }}/${{ steps.vars.outputs.image_name }}:buildcache
        cache-to: type=registry,ref=${{ inputs.registry }}/${{ steps.vars.outputs.image_name }}:buildcache,mode=max
        labels: |
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.version=${{ steps.vars.outputs.tag }}
          org.opencontainers.image.created=${{ github.event.release.published_at || github.event.repository.updated_at }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.title=${{ github.repository }}

    - name: Confirm pushed tags
      shell: bash
      run: |
        echo "Published ${{ inputs.registry }}/${{ steps.vars.outputs.image_name }}:${{ steps.vars.outputs.tag }}"
        if [ "${{ steps.vars.outputs.latest }}" = "true" ]; then
          echo "Also tagged as :latest"
        fi
